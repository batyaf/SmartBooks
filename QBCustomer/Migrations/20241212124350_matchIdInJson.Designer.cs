// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QBCustomer.Models;

#nullable disable

namespace QBCustomer.Migrations
{
    [DbContext(typeof(SmartBooksContext))]
    [Migration("20241212124350_matchIdInJson")]
    partial class matchIdInJson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QBCustomer.Models.CustomerModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("BalanceWithJobs")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("BillAddrId")
                        .HasColumnType("int");

                    b.Property<bool?>("BillWithParent")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullyQualifiedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Job")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredDeliveryMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryEmailAddrId")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryPhoneId")
                        .HasColumnType("int");

                    b.Property<string>("PrintOnCheckName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuickBooksId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SyncToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BillAddrId")
                        .IsUnique()
                        .HasFilter("[BillAddrId] IS NOT NULL");

                    b.HasIndex("PrimaryEmailAddrId")
                        .IsUnique()
                        .HasFilter("[PrimaryEmailAddrId] IS NOT NULL");

                    b.HasIndex("PrimaryPhoneId")
                        .IsUnique()
                        .HasFilter("[PrimaryPhoneId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("QBCustomer.Models.CustomerToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RealmId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerTokens");
                });

            modelBuilder.Entity("QBCustomer.Models.QbAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountrySubDivisionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("qbAddresses");
                });

            modelBuilder.Entity("QBCustomer.Models.QbContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreeFormNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QbContactInfos");
                });

            modelBuilder.Entity("QBCustomer.Models.CustomerModel", b =>
                {
                    b.HasOne("QBCustomer.Models.QbAddress", "BillAddr")
                        .WithOne()
                        .HasForeignKey("QBCustomer.Models.CustomerModel", "BillAddrId");

                    b.HasOne("QBCustomer.Models.QbContactInfo", "PrimaryEmailAddr")
                        .WithOne()
                        .HasForeignKey("QBCustomer.Models.CustomerModel", "PrimaryEmailAddrId");

                    b.HasOne("QBCustomer.Models.QbContactInfo", "PrimaryPhone")
                        .WithOne()
                        .HasForeignKey("QBCustomer.Models.CustomerModel", "PrimaryPhoneId");

                    b.Navigation("BillAddr");

                    b.Navigation("PrimaryEmailAddr");

                    b.Navigation("PrimaryPhone");
                });
#pragma warning restore 612, 618
        }
    }
}
